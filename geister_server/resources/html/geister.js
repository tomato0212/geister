// Generated by CoffeeScript 1.8.0
(function() {
  var CellState, GameOfGeister, GeisterObj, Player;

  GeisterObj = (function() {
    GeisterObj.COLOR_NONE = 0;

    GeisterObj.COLOR_RED = 1;

    GeisterObj.COLOR_BLUE = 2;

    GeisterObj.PLAYER_NONE = 0;

    GeisterObj.PLAYER_A = 1;

    GeisterObj.PLAYER_B = 2;

    GeisterObj.prototype.color = null;

    GeisterObj.prototype.player = null;

    GeisterObj.prototype.hidden = false;

    GeisterObj.prototype.moving = false;

    function GeisterObj(color, player) {
      this.color = color;
      this.player = player;
    }

    return GeisterObj;

  })();

  CellState = (function() {
    CellState.prototype.obj = null;

    function CellState(row, column) {
      var _ref;
      this.row = row;
      this.column = column;
      if ((2 <= (_ref = this.column) && _ref <= 5)) {
        if (this.row === 1) {
          this.obj = new GeisterObj(GeisterObj.COLOR_RED, GeisterObj.PLAYER_A);
        } else if (this.row === 6) {
          this.obj = new GeisterObj(GeisterObj.COLOR_RED, GeisterObj.PLAYER_B);
        } else if (this.row === 2) {
          this.obj = new GeisterObj(GeisterObj.COLOR_BLUE, GeisterObj.PLAYER_A);
        } else if (this.row === 5) {
          this.obj = new GeisterObj(GeisterObj.COLOR_BLUE, GeisterObj.PLAYER_B);
        } else {
          this.obj = new GeisterObj(GeisterObj.COLOR_NONE, GeisterObj.PLAYER_NONE);
        }
      } else {
        this.obj = new GeisterObj(GeisterObj.COLOR_NONE, GeisterObj.PLAYER_NONE);
      }
    }

    return CellState;

  })();

  Player = (function() {
    Player.prototype.got_obj = null;

    function Player() {
      this.got_obj = [];
    }

    Player.prototype.got = function(o) {
      return this.got_obj.push(o);
    };

    return Player;

  })();

  GameOfGeister = (function() {
    GameOfGeister.prototype.cellSize = 60;

    GameOfGeister.prototype.numberOfRows = 8;

    GameOfGeister.prototype.numberOfColumns = 8;

    GameOfGeister.prototype.canvas = null;

    GameOfGeister.prototype.drawingContext = null;

    GameOfGeister.prototype.currentCell = null;

    GameOfGeister.prototype.arrow_img = null;

    GameOfGeister.prototype.geister_obj_img = null;

    GameOfGeister.prototype.geister_red_img = null;

    GameOfGeister.prototype.geister_blue_img = null;

    GameOfGeister.prototype.selectedX = null;

    GameOfGeister.prototype.selectedY = null;

    GameOfGeister.prototype.selectedItem = null;

    GameOfGeister.prototype.turn = 'B';

    GameOfGeister.prototype.game_status = 'PREPARE';

    GameOfGeister.prototype.playerA = null;

    GameOfGeister.prototype.playerB = null;

    function GameOfGeister() {
      this.game_status = 'PREPARE';
      this.createCanvas();
      this.resizeCanvas();
      this.createDrawingContext();
      $('#start').click((function(_this) {
        return function() {
          return _this.readyGame();
        };
      })(this));
      $('#gameboard').mousedown((function(_this) {
        return function(e) {
          return _this.mouseDown(e);
        };
      })(this));
      this.ready_resources();
    }

    GameOfGeister.prototype.ready_resources = function(f) {
      this.arrow_img = new Image();
      this.arrow_img.src = "arrow.png?" + new Date().getTime();
      return this.arrow_img.onload = (function(_this) {
        return function() {
          _this.geister_obj_img = new Image();
          _this.geister_obj_img.src = "geister_obj.png?" + new Date().getTime();
          return _this.geister_obj_img.onload = function() {
            _this.geister_red_img = new Image();
            _this.geister_red_img.src = "geister_red.png?" + new Date().getTime();
            return _this.geister_red_img.onload = function() {
              _this.geister_blue_img = new Image();
              _this.geister_blue_img.src = "geister_blue.png?" + new Date().getTime();
              return _this.geister_blue_img.onload = function() {
                return _this.initGame();
              };
            };
          };
        };
      })(this);
    };

    GameOfGeister.prototype.initGame = function() {
      this.playerA = new Player();
      this.playerB = new Player();
      this.game_status = 'PREPARE';
      this.initCells();
      return this.drawBoard();
    };

    GameOfGeister.prototype.swapOwnObj = function(n) {
      var c, c0, c1, column, i, myCells, row, _i, _j, _k, _ref, _ref1, _results;
      myCells = [];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          c = this.currentCell[row][column];
          if (c.obj.player === GeisterObj.PLAYER_A) {
            myCells.push(c);
          }
        }
      }
      _results = [];
      for (i = _k = 0; 0 <= n ? _k < n : _k > n; i = 0 <= n ? ++_k : --_k) {
        c0 = myCells[parseInt(Math.random() * myCells.length)];
        c1 = myCells[parseInt(Math.random() * myCells.length)];
        _results.push(this.swapObject(c0.column, c0.row, c1.column, c1.row));
      }
      return _results;
    };

    GameOfGeister.prototype.readyGame = function() {
      var column, row, start, _i, _j, _ref, _ref1;
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          if (this.currentCell[row][column].obj.player === GeisterObj.PLAYER_A) {
            this.currentCell[row][column].obj.hidden = true;
          }
        }
      }
      this.drawBoard();
      this.swapOwnObj(100);
      this.game_status = 'RUN';
      return start = $('#start')[0].disabled = true;
    };

    GameOfGeister.prototype.isEscapeWin = function() {
      if (this.currentCell[6][0].obj.player === GeisterObj.PLAYER_A) {
        return GeisterObj.PLAYER_A;
      }
      if (this.currentCell[7][1].obj.player === GeisterObj.PLAYER_A) {
        return GeisterObj.PLAYER_A;
      }
      if (this.currentCell[6][7].obj.player === GeisterObj.PLAYER_A) {
        return GeisterObj.PLAYER_A;
      }
      if (this.currentCell[7][6].obj.player === GeisterObj.PLAYER_A) {
        return GeisterObj.PLAYER_A;
      }
      if (this.currentCell[0][1].obj.player === GeisterObj.PLAYER_B) {
        return GeisterObj.PLAYER_B;
      }
      if (this.currentCell[1][0].obj.player === GeisterObj.PLAYER_B) {
        return GeisterObj.PLAYER_B;
      }
      if (this.currentCell[0][6].obj.player === GeisterObj.PLAYER_B) {
        return GeisterObj.PLAYER_B;
      }
      if (this.currentCell[1][7].obj.player === GeisterObj.PLAYER_B) {
        return GeisterObj.PLAYER_B;
      }
      return GeisterObj.PLAYER_NONE;
    };

    GameOfGeister.prototype.countObjColor = function() {
      var a, column, o, row, _i, _j, _ref, _ref1;
      a = [0, 0, 0, 0];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          o = this.currentCell[row][column].obj;
          if (o.player === GeisterObj.PLAYER_A) {
            if (o.color === GeisterObj.COLOR_RED) {
              a[0] = a[0] + 1;
            } else {
              a[1] = a[1] + 1;
            }
          } else if (o.player === GeisterObj.PLAYER_B) {
            if (o.color === GeisterObj.COLOR_RED) {
              a[2] = a[2] + 1;
            } else {
              a[3] = a[3] + 1;
            }
          }
        }
      }
      return a;
    };

    GameOfGeister.prototype.nextGame = function() {
      var p;
      p = this.checkGame();
      if (p === GeisterObj.PLAYER_NONE) {
        if (this.turn === 'B') {
          this.turn = 'A';
          return this.simplePlayerOp();
        } else {
          return this.turn = 'B';
        }
      } else {
        this.drawBoard();
        if (p === GeisterObj.PLAYER_A) {
          alert('CPU Win!!');
        } else {
          alert('You Win!!');
        }
        return this.initGame();
      }
    };

    GameOfGeister.prototype.checkGame = function() {
      var colors, winner;
      winner = this.isEscapeWin();
      if (winner !== GeisterObj.PLAYER_NONE) {
        return winner;
      }
      colors = this.countObjColor();
      if (colors[0] === 0) {
        return GeisterObj.PLAYER_A;
      }
      if (colors[1] === 0) {
        return GeisterObj.PLAYER_B;
      }
      if (colors[2] === 0) {
        return GeisterObj.PLAYER_B;
      }
      if (colors[3] === 0) {
        return GeisterObj.PLAYER_A;
      }
      return GeisterObj.PLAYER_NONE;
    };

    GameOfGeister.prototype.isEscapeMove = function(obj, x, y, dx, dy) {
      if (obj.player === GeisterObj.PLAYER_B && obj.color === GeisterObj.COLOR_BLUE) {
        if (x === 1 && y === 1 && dx === -1 && dy === 0) {
          return true;
        }
        if (x === 1 && y === 1 && dx === 0 && dy === -1) {
          return true;
        }
        if (x === 6 && y === 1 && dx === 1 && dy === 0) {
          return true;
        }
        if (x === 6 && y === 1 && dx === 0 && dy === -1) {
          return true;
        }
        return false;
      } else if (obj.player === GeisterObj.PLAYER_A && obj.color === GeisterObj.COLOR_BLUE) {
        if (x === 1 && y === 6 && dx === -1 && dy === 0) {
          return true;
        }
        if (x === 1 && y === 6 && dx === 0 && dy === 1) {
          return true;
        }
        if (x === 6 && y === 6 && dx === 1 && dy === 0) {
          return true;
        }
        if (x === 6 && y === 6 && dx === 0 && dy === 1) {
          return true;
        }
        return false;
      } else {
        return false;
      }
    };

    GameOfGeister.prototype.isIllegalMove = function(x, y, dx, dy) {
      var o, t, _ref, _ref1;
      o = this.currentCell[y][x];
      if (this.isEscapeMove(o.obj, x, y, dx, dy)) {
        return true;
      }
      if (!((dx === 0 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && dy === 0))) {
        return false;
      }
      if (!((0 < (_ref = y + dy) && _ref < this.numberOfRows - 1))) {
        return false;
      }
      if (!((0 < (_ref1 = x + dx) && _ref1 < this.numberOfColumns - 1))) {
        return false;
      }
      t = this.currentCell[y + dy][x + dx];
      if (t.obj.player === o.obj.player) {
        return false;
      }
      return true;
    };

    GameOfGeister.prototype.simplePlayerOp = function() {
      var c, candidates, column, o, objects, result, row, _i, _j, _k, _len, _ref, _ref1;
      objects = [];
      candidates = [];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          if (this.currentCell[row][column].obj.player === GeisterObj.PLAYER_A) {
            objects.push([row, column]);
          }
        }
      }
      for (_k = 0, _len = objects.length; _k < _len; _k++) {
        o = objects[_k];
        if (this.isIllegalMove(o[1], o[0], 0, 1)) {
          candidates.push([o[1], o[0], 0, 1]);
        }
        if (this.isIllegalMove(o[1], o[0], 0, -1)) {
          candidates.push([o[1], o[0], 0, -1]);
        }
        if (this.isIllegalMove(o[1], o[0], 1, 0)) {
          candidates.push([o[1], o[0], 1, 0]);
        }
        if (this.isIllegalMove(o[1], o[0], -1, 0)) {
          candidates.push([o[1], o[0], -1, 0]);
        }
      }
      c = candidates[parseInt(Math.random() * candidates.length)];
      result = this.moveOperation(c[0], c[1], c[0] + c[2], c[1] + c[3]);
      this.drawBoard();
      return this.nextGame();
    };

    GameOfGeister.prototype.getXPosition = function(v) {
      return parseInt(v / this.cellSize);
    };

    GameOfGeister.prototype.getYPosition = function(v) {
      return parseInt(v / this.cellSize);
    };

    GameOfGeister.prototype.clearMouseEvent = function() {
      if (this.selectedItem !== null) {
        this.selectedItem.moving = false;
      }
      this.selectedX = null;
      this.selectedY = null;
      this.selectedItem = null;
      this.drawBoard();
      $('#gameboard').unbind("mouseup mousemove mouseleave");
      return $(this).unbind("mouseup mousemove mouseleave");
    };

    GameOfGeister.prototype.swapObject = function(sx, sy, ex, ey) {
      var c_tmp, eo, p_tmp, so;
      so = this.currentCell[sy][sx].obj;
      eo = this.currentCell[ey][ex].obj;
      if (so.player === eo.player) {
        p_tmp = so.player;
        c_tmp = so.color;
        so.player = eo.player;
        so.color = eo.color;
        eo.player = p_tmp;
        return eo.color = c_tmp;
      }
    };

    GameOfGeister.prototype.moveOperation = function(sx, sy, ex, ey) {
      var c_tmp, eo, h_tmp, p_tmp, result, so;
      console.log("move: " + sx + "," + sy + "->" + ex + "," + ey);
      this.selectedItem.moving = false;
      so = this.currentCell[sy][sx].obj;
      eo = this.currentCell[ey][ex].obj;
      result = new GeisterObj(eo.color, eo.player);
      if (this.isIllegalMove(sx, sy, ex - sx, ey - sy) === true) {
        p_tmp = so.player;
        c_tmp = so.color;
        h_tmp = so.hidden;
        so.player = GeisterObj.PLAYER_NONE;
        so.color = GeisterObj.COLOR_NONE;
        so.hidden = false;
        eo.player = p_tmp;
        eo.color = c_tmp;
        eo.hidden = h_tmp;
        return result;
      } else {
        return false;
      }
    };

    GameOfGeister.prototype.mouseUp = function(e) {
      var ex, ey, result, sx, sy;
      ex = this.getXPosition(e.offsetX);
      ey = this.getYPosition(e.offsetY);
      sx = this.getXPosition(this.selectedX);
      sy = this.getYPosition(this.selectedY);
      if (this.game_status === 'READY') {
        this.swapObject(sx, sy, ex, ey);
      }
      if (this.game_status === 'RUN' && this.turn === 'B') {
        if (this.isIllegalMove(sx, sy, ex - sx, ey - sy)) {
          result = this.moveOperation(sx, sy, ex, ey);
          if (result.player !== GeisterObj.PLAYER_NONE) {
            this.playerB.got(result);
          }
          this.nextGame();
        }
      }
      return this.clearMouseEvent();
    };

    GameOfGeister.prototype.mouseLeave = function(e) {
      return this.clearMouseEvent();
    };

    GameOfGeister.prototype.mouseMove = function(e) {
      var img;
      if (this.selectedItem !== null) {
        this.drawBoard();
        img = this.getObjImage(this.selectedItem);
        return this.drawingContext.drawImage(img, e.offsetX - this.cellSize / 2, e.offsetY - this.cellSize / 2, this.cellSize, this.cellSize);
      }
    };

    GameOfGeister.prototype.mouseDown = function(e) {
      var column, row;
      if (!(this.game_status === 'READY' || (this.game_status === 'RUN' && this.turn === 'B'))) {
        return;
      }
      column = this.getXPosition(e.offsetX);
      row = this.getYPosition(e.offsetY);
      if (this.currentCell[row][column].obj.player === GeisterObj.PLAYER_B) {
        this.selectedItem = this.currentCell[row][column].obj;
        this.selectedX = e.offsetX;
        this.selectedY = e.offsetY;
        this.selectedItem.moving = true;
        $('#gameboard').mousemove((function(_this) {
          return function(e) {
            return _this.mouseMove(e);
          };
        })(this));
        $('#gameboard').mouseleave((function(_this) {
          return function(e) {
            return _this.mouseLeave(e);
          };
        })(this));
        return $('#gameboard').mouseup((function(_this) {
          return function(e) {
            return _this.mouseUp(e);
          };
        })(this));
      }
    };

    GameOfGeister.prototype.createCanvas = function() {
      return this.canvas = $('#gameboard')[0];
    };

    GameOfGeister.prototype.resizeCanvas = function() {
      this.canvas.height = this.cellSize * this.numberOfRows;
      return this.canvas.width = this.cellSize * this.numberOfColumns;
    };

    GameOfGeister.prototype.createDrawingContext = function() {
      return this.drawingContext = this.canvas.getContext('2d');
    };

    GameOfGeister.prototype.initCells = function() {
      var column, row, _i, _ref, _results;
      this.currentCell = [];
      _results = [];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        this.currentCell[row] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.currentCell[row][column] = new CellState(row, column));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfGeister.prototype.drawImage = function(img, x, y, rot) {
      if (rot) {
        this.drawingContext.save();
        this.drawingContext.rotate(180 * Math.PI / 180);
        x = (-x - 1) * this.cellSize;
        y = (-y - 1) * this.cellSize;
      } else {
        x = x * this.cellSize;
        y = y * this.cellSize;
      }
      this.drawingContext.drawImage(img, x, y, this.cellSize, this.cellSize);
      if (rot) {
        return this.drawingContext.restore();
      }
    };

    GameOfGeister.prototype.drawBoard = function() {
      var i, o, rdy, _i, _len, _ref;
      this.drawingContext.clearRect(0, 0, this.drawingContext.canvas.clientWidth, this.drawingContext.canvas.clientHeight);
      this.drawImage(this.arrow_img, 1, 1, false);
      this.drawImage(this.arrow_img, 6, 1, true);
      this.drawImage(this.arrow_img, 1, 6, false);
      this.drawImage(this.arrow_img, 6, 6, true);
      this.drawGrid();
      _ref = this.playerB.got_obj;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        o = _ref[i];
        this.drawImage(this.getObjImage(o), i, 7, true);
      }
      if (this.game_status === 'PREPARE') {
        this.game_status = 'READY';
        return rdy = $('#start')[0].disabled = false;
      }
    };

    GameOfGeister.prototype.drawGrid = function() {
      var column, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.numberOfRows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (column = _j = 0, _ref1 = this.numberOfColumns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.drawCell(this.currentCell[row][column]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfGeister.prototype.getObjImage = function(obj) {
      var img;
      if (obj.hidden === true && $('#debug').is(':checked') === false) {
        img = this.geister_obj_img;
      } else if (obj.color === GeisterObj.COLOR_BLUE) {
        img = this.geister_blue_img;
      } else {
        img = this.geister_red_img;
      }
      return img;
    };

    GameOfGeister.prototype.drawCell = function(cell) {
      var img, strk, x, y, _ref, _ref1;
      x = cell.column * this.cellSize;
      y = cell.row * this.cellSize;
      if (cell.obj.player !== GeisterObj.PLAYER_NONE && cell.obj.moving === false) {
        img = this.getObjImage(cell.obj);
        this.drawImage(img, cell.column, cell.row, cell.obj.player === GeisterObj.PLAYER_A);
      }
      if ((0 < (_ref = cell.column) && _ref < 7) && (0 < (_ref1 = cell.row) && _ref1 < 7)) {
        strk = 'rgba(0, 0, 0, 1)';
      } else {
        strk = 'rgba(0, 0, 0, 0)';
      }
      this.drawingContext.strokeStyle = strk;
      return this.drawingContext.strokeRect(x, y, this.cellSize, this.cellSize);
    };

    return GameOfGeister;

  })();

  window.GameOfGeister = GameOfGeister;

}).call(this);
